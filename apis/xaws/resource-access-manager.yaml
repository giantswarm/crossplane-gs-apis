apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  creationTimestamp: null
  labels:
    component: aws
    provider: aws
    type: resource-access-manager
  name: resource-access-manager
spec:
  compositeTypeRef:
    apiVersion: xaws.crossplane.giantswarm.io/v1alpha1
    kind: ResourceAccessManager
  mode: Pipeline
  pipeline:
  - functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        creationTimestamp: null
      spec:
        source: |-
          import regex
          oxr = option("params").oxr
          dxr = option("params").dxr
          ocds = option("params").ocds
          dcds = option("params").dcds

          exists = lambda x: any -> bool {
              """
              Check if a value exists.
              """
              x in list(ocds)
          }

          get = lambda x: {:}, y: str, d: any -> any {
              """
              Get an item from a dictionary using a dot separated path.
              If the item is not found, return a default value.
              """
              p = regex.split(y, "\.")
              c = p[0]
              y = ".".join(p[1:])
              x[c] if len(p) == 1 and c in x else d if c not in x else get(x[c], y, d)
          }

          ocdsstatus = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the status of an ocds resource.
              """
              _x = None
              if get(ocds, "${x}.Resource.status.atProvider", False):
                  _x = get(ocds, "${x}.Resource.status.atProvider.${y}", d)
              else:
                  _x = get(ocds, "${x}.Resource.status.${y}", d)
              _x if _x else d
          }

          ready = lambda x: str -> bool {
              """
              Check if a value is ready.
              """
              conditionsReady = all_true([
                  get(c, "status", "False") == "True" for c in ocdsstatus(x, "conditions", [])
              ])

              ap = get(ocds, "${x}.Resource.status.atProvider", {})
              objectReady = any_true([
                  ocdsstatus(x, "ready", False),
                  len(list(ap)) > 0,
              ])

              all_true([
                  any_true([exists(x), conditionsReady]),
                  objectReady,
              ])
          }

          readystr = lambda x: str -> str {
              """
              Check if a value is ready.
              """
              "True" if ready(x) else "False"
          }

          allReady = lambda -> bool {
              """
              Check if all managed resources are ready.
              """
              all_true([
                  ready(x)
                  for x in list(ocds)
              ])
          }

          appName = get(oxr, "spec.claimRef.name", "")
          dp = get(oxr, "spec.deletionPolicy", "Delete")
          labels = get(oxr, "metadata.labels", {})
          mgmtPolicy = get(oxr, "spec.managementPolicies", [])
          pcr = get(oxr, "spec.providerConfigRef", {"name": "default"})
          region = get(oxr, "spec.region", "eu-central-1")
          tags = get(oxr, "spec.tags", {}) | {
              "region": region,
          }
          publishConnection = get(oxr, "spec.publishConnectionDetailsTo", {})

          ramShare = [
              {
                  _resourceName = "ram-share-${appName}-${region}"
                  "apiVersion": "ram.aws.upbound.io/v1beta1"
                  "kind": "ResourceShare"
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name": _resourceName
                          "krm.kcl.dev/ready" = readystr(_resourceName)
                      }
                  }
                  "spec": {
                      "deletionPolicy": dp
                      "forProvider": {
                          "allowExternalPrincipals": get(oxr, "spec.allowExternalPrincipals", True),
                          "name": "${appName}-${region}",
                          "region": region,
                          "tags": tags,
                      }
                      "managementPolicies": mgmtPolicy,
                      "providerConfigRef": pcr
                  }
              }
              for _ in [True]
          ]

          ramShareId = ocdsstatus("ram-share-${appName}-${region}", "id", False)
          ramShareArn = ocdsstatus("ram-share-${appName}-${region}", "arn", False)

          ramAssociations = [
              {
                  _id = regex.split(resource, "/")[-1]
                  _resourceName = "ram-r-assoc-${_id}"
                  "apiVersion": "ram.aws.upbound.io/v1beta1"
                  "kind": "ResourceAssociation"
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name": _resourceName
                          "krm.kcl.dev/ready" = readystr(_resourceName)
                      }
                  }
                  "spec": {
                      "deletionPolicy": dp
                      "forProvider": {
                          "region": region,
                          "resourceArn": resource,
                          "resourceShareArn": ramShareArn,
                      }
                      "managementPolicies": mgmtPolicy,
                      "providerConfigRef": pcr
                  }
              }
              for i, resource in get(oxr, "spec.resources", [])
              if all_true([
                  get(oxr, "spec.resources", False),
                  ramShareArn, resource,
              ])
          ]

          ramPrincipleAssociations = [
              {
                  _resourceName = "ram-p-assoc-${i}"
                  "apiVersion": "ram.aws.upbound.io/v1beta1",
                  "kind": "PrincipalAssociation",
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name": _resourceName,
                          "krm.kcl.dev/ready" = readystr(_resourceName),
                      },
                  },
                  "spec": {
                      "deletionPolicy": dp,
                      "forProvider": {
                          "principal": get(principal, "principal", ""),
                          "region": region,
                          "resourceShareArn": ramShareArn,
                      },
                      "managementPolicies": mgmtPolicy,
                      "providerConfigRef": pcr,
                  },
              }
              for i, principal in get(oxr, "spec.principals", [])
              if all_true([
                  ramShareArn,
                  get(oxr, "spec.principals", False),
              ])
          ]

          ramShareAccepters = [
              {
                  _resourceName = "ram-share-accepter-${i}"
                  "apiVersion": "ram.aws.upbound.io/v1beta1"
                  "kind": "ResourceShareAccepter"
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name": _resourceName
                          "krm.kcl.dev/ready" = readystr(_resourceName)
                      }
                  }
                  "spec": {
                      "deletionPolicy": dp,
                      "forProvider": {
                          "region": region,
                          "shareArn": ramShareArn,
                      }
                      "managementPolicies": mgmtPolicy,
                      "providerConfigRef": get(principal, "providerConfigRef", pcr)
                  }
              }
              for i, principal in get(oxr, "spec.principals", [])
              if all_true([
                  ramShareArn,
                  get(oxr, "spec.principals", False),
                  principal,
                  get(principal, "crossOrg", False),
              ])
          ]

          newdxr = {
              **dxr,
              **{

                  "status": {
                      if ramShareId:
                          "id": ramShareId,
                      if ramShareArn:
                          "arn": ramShareArn,

                      "ready" = allReady()
                  }
              }
          }

          _items = [
              i for r in [
                  ramShare, ramAssociations, [newdxr],
                  ramPrincipleAssociations, ramShareAccepters
              ]
              for i in r if i
          ]

          items = _items
        target: ""
    step: function-kcl-create-ram
  - functionRef:
      name: function-auto-ready
    step: function-auto-ready
