apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  creationTimestamp: null
  labels:
    component: database
    provider: aws
    type: provisioning
  name: rds-provisioning
spec:
  compositeTypeRef:
    apiVersion: xdatabase.crossplane.giantswarm.io/v1alpha1
    kind: RdsProvisioning
  mode: Pipeline
  pipeline:
  - functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        creationTimestamp: null
      spec:
        source: |-
          import regex

          oxr = option("params").oxr
          dxr = option("params").dxr
          ocds = option("params").ocds
          dcds = option("params").dcds

          get = lambda x: {:}, y: str, d: any -> any {
              """
              Get an item from a dictionary using a dot separated path.
              If the item is not found, return a default value.
              """
              p = regex.split(y, "\.")
              c = p[0]
              y = ".".join(p[1:])
              x[c] if len(p) == 1 and c in x else d if c not in x else get(x[c], y, d)
          }

          exists = lambda x: any -> bool {
              """
              Check if a value exists.
              """
              x in list(ocds)
          }

          ocdsstatus = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the status of an ocds resource.
              """
              _x = None
              if get(ocds, "${x}.Resource.status.atProvider", False):
                  _x = get(ocds, "${x}.Resource.status.atProvider.${y}", d)
              else:
                  _x = get(ocds, "${x}.Resource.status.${y}", d)
              _x if _x else d
          }

          # Unlike other compositions in this series,
          # provisioning does not always have `atProvider` status.
          #
          # This means we can only rely on the conditions of resources
          # and not add a confirmation step to the validation.
          ready = lambda x: str -> bool {
              """
              Check if a value is ready.
              """
              conditionsReady = all_true([
                  get(c, "status", "False") == "True" for c in ocdsstatus(x, "conditions", [])
              ])
              any_true([exists(x), conditionsReady])
          }

          allReady = lambda -> bool {
              """
              Check if all managed resources are ready.
              """
              all_true([
                  ready(x)
                  for x in list(ocds)
              ])
          }


          readystr = lambda x: str -> str {
              """
              Check if a value is ready.
              """
              "True" if ready(x) else "False"
          }

          dp = get(oxr, "spec.deletionPolicy", "Delete")
          pcr = get(oxr, "spec.providerConfigRef", {"name": "default"})
          mgmtPolicy = get(oxr, "spec.managementPolicies", [])

          e = get(oxr, "spec.engine", False)
          _engine = ""

          if e and e in ["mysql", "aurora-mysql", "mariadb"]:
              _engine = "mysql"
          elif e and e in ["postgres", "aurora-postgresql"]:
              _engine = "postgresql"
          else:
              assert False, "Unsupported engine: ${e}"

          appName = get(oxr, "spec.claimRef.name", "")
          connectionSecret = get(oxr, "spec.connectionSecretName", "")
          _requiredDatabases = {}

          defaultDatabase = {
              "${appName}" = {
                  "users" = {
                      "${appName}" = {}
                  }
              }
          }

          if _engine == "mysql":
              _requiredDatabases = {
                  "${dbName}": {
                      "users": {
                          "${username}": {
                              **{
                                  "maxQueriesPerHour" = 1000,
                                  "maxUpdatesPerHour" = 1000,
                                  "maxConnectionsPerHour" = 100,
                                  "maxUserConnections" = 10,
                                  "privileges" = [
                                      "ALL PRIVILEGES",
                                  ],
                              },
                              **{
                                  k = v
                                  for k, v in user
                              }
                          }
                          for username, user in get(dbUsers, "users", {})
                      }
                  }
                  for dbName, dbUsers in defaultDatabase | get(oxr, "spec.databases", {})
              }

          if _engine == "postgresql":
              _requiredDatabases = {
                  "${dbName}": {
                      "users": {
                          "${username}" = {
                              **{
                                  "connectionLimit" = 10,
                                  "privileges" = [
                                      "ALL",
                                  ],
                                  "bypassRls" = False,
                                  "createDb" = False,
                                  "createRole" = False,
                                  "inherit" = True,
                                  "login" = True,
                                  "replication" = False,
                                  "superuser" = False,
                              },
                              **{
                                  k = v
                                  for k, v in user
                              }
                          }
                          for username, user in get(dbUsers, "users", {})
                      }
                  }
                  for dbName, dbUsers in defaultDatabase | get(oxr, "spec.databases", {})
              }

          print("REQUIRED DATABASES", _requiredDatabases)
          # Create provider connection secret for the database
          newPcrName = "${appName}-${_engine}-provider-config"

          providerConnectionSecret = [
              {
                  _resourceName = "${_engine}-connection-secret"
                  "apiVersion": "kubernetes.crossplane.io/v1alpha2"
                  "kind": "Object"
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name": _resourceName
                          "krm.kcl.dev/ready": readystr(_resourceName)
                      }
                      "name": newPcrName
                  }
                  "spec": {
                      "deletionPolicy": dp
                      "providerConfigRef": {
                          "name": get(oxr, "spec.kubernetesProviderConfig.name", "")
                      }
                      "forProvider": {
                          "manifest": {
                              "apiVersion": "${_engine}.sql.crossplane.io/v1alpha1"
                              "kind": "ProviderConfig"
                              "metadata": {
                                  "name": newPcrName
                              }
                              "spec": {
                                  "credentials": {
                                      "connectionSecretRef": {
                                          "name": connectionSecret
                                          "namespace": get(oxr, "spec.claimRef.namespace", "")
                                      }
                                      "source": "MySQLConnectionSecret" if _engine == "mysql" else "PostgreSQLConnectionSecret"
                                  }
                                  if _engine == "mysql":
                                      "tls" = "preferred"
                                  if _engine == "postgresql":
                                      "defaultDatabase" = "postgres"
                                      # https://github.com/crossplane-contrib/provider-sql/issues/102
                                      "sslMode" = "require"
                              }
                          }
                      }
                  }
              }
          ] if all_true([
              connectionSecret, _requiredDatabases,
          ]) else []

          _providerConfigName = get(oxr, "spec.providerConfigRef.name", "")
          providerConfigName = newPcrName if connectionSecret else _providerConfigName
          # Create each required database
          databases = [
              {
                  _resourceName = "database-${database}"
                  "apiVersion": "${_engine}.sql.crossplane.io/v1alpha1"
                  "kind": "Database"
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name": _resourceName
                          "krm.kcl.dev/ready": readystr(_resourceName)
                      }
                      "name": database
                  }
                  "spec": {
                      "deletionPolicy": dp
                      "providerConfigRef": {
                          "name": providerConfigName
                      }
                      "forProvider": {}
                  }
              }

              for database, _ in _requiredDatabases
              if _requiredDatabases
          ]

          # Create each required user
          users = [
              {
                  _resourceName = "${database}-user-${username}"
                  "apiVersion": "${_engine}.sql.crossplane.io/v1alpha1"
                  "kind": "User" if _engine == "mysql" else "Role"
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name": _resourceName
                          "krm.kcl.dev/ready": readystr(_resourceName)
                      }
                      "labels": {
                          "engine": _engine
                          "database": database
                          "username": username
                      }
                      "name": username
                  }
                  "spec": {
                      "deletionPolicy": dp
                      "forProvider": {
                          if _engine == "mysql":
                              "resourceOptions": {
                                  "maxQueriesPerHour": get(user, "maxQueriesPerHour", 1000)
                                  "maxUpdatesPerHour": get(user, "maxUpdatesPerHour", 1000)
                                  "maxConnectionsPerHour": get(user, "maxConnectionsPerHour", 100)
                                  "maxUserConnections": get(user, "maxUserConnections", 10)
                              }
                          if _engine == "postgresql":
                              if get(user, "configurationParameters", False):
                                  "configurationParameters": [
                                      {
                                          "name": k
                                          "value" = v
                                      }
                                      for k, v in get(user, "configurationParameters", {})
                                  ]
                              "connectionLimit" = get(user, "connectionLimit", 10)
                              "privileges": {
                                  "bypassRls" = get(user, "bypassRls", False)
                                  "createDb" = get(user, "createDb", False)
                                  "createRole" = get(user, "createRole", False)
                                  "inherit" = get(user, "inherit", True)
                                  "login" = get(user, "login", True)
                                  "replication" = get(user, "replication", False)
                                  "superUser" = get(user, "superuser", False)
                              }
                      }
                      "providerConfigRef": {
                          "name": providerConfigName,
                      }
                      "writeConnectionSecretToRef": {
                          "name": "${appName}-rds-user-${username}" if username != appName else "${appName}-rds-user"
                          "namespace": get(oxr, "spec.claimRef.namespace", "")
                      }
                  }
              }

              for database, config in _requiredDatabases
              for username, user in get(config, "users", [])
              if _requiredDatabases and databases
          ]

          connectionSecrets = {
              "app" = "${appName}-rds-user"
              _users = {
                  username: "${appName}-rds-user-${username}"
                  for database, config in _requiredDatabases
                  for username, user in get(config, "users", [])
                  if username != appName
              }
              if _users:
                  "users" = _users
          }

          grants = [
              {
                  _resourceName = "${database}-grant-${username}"
                  "apiVersion": "${_engine}.sql.crossplane.io/v1alpha1"
                  "kind": "Grant"
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name": _resourceName
                          "krm.kcl.dev/ready": readystr(_resourceName)
                      }
                      "labels": {
                          "engine": _engine
                          "database": database
                          "username": username
                      }
                      "name": username
                  }
                  "spec": {
                      "deletionPolicy": dp
                      "providerConfigRef": {
                          "name": providerConfigName
                      }
                      "forProvider": {
                          "database" = database,
                          "privileges" = get(user, "privileges", []),
                          if _engine == "mysql":
                              "user" = username
                          if _engine == "postgresql":
                              "role": username
                      }
                  }
              }
              for database, config in _requiredDatabases
              for username, user in get(config, "users", [])
              if all_true([
                  _requiredDatabases,
                  databases,
                  users,
                  user,
                  get(user, "privileges", False),
              ])
          ]

          # Push Secrets
          reader = get(oxr, "spec.readerEndpoint", "")

          pushSecrets = [
              {
                  _name = get(user, "spec.writeConnectionSecretToRef.name", "")
                  "apiVersion": "kubernetes.crossplane.io/v1alpha2"
                  "kind": "Object"
                  "metadata": {
                      "annotations": {
                          _resourceName = "${_name}-pushsecret"
                          "krm.kcl.dev/composition-resource-name" = _resourceName
                          "krm.kcl.dev/ready": readystr(_resourceName)
                      }
                  }
                  "spec": {
                      "deletionPolicy": dp
                      "forProvider": {
                          "manifest": {
                              "apiVersion": "external-secrets.io/v1alpha1"
                              "kind": "PushSecret"
                              "metadata": {
                                  "namespace": get(oxr, "spec.claimRef.namespace", "default")
                              }
                              "spec": {
                                  "refreshInterval": "10s",
                                  "secretStoreRefs": [
                                      {
                                          "name": value.name,
                                          "kind": "ClusterSecretStore" if value.clusterScoped else "SecretStore",
                                      },
                                      for _, value in get(oxr, "spec.eso.stores", [])
                                      if value.enabled and get(oxr, "spec.eso.enabled", True)
                                  ],
                                  "template": {
                                      "engineVersion": "v2"
                                      "data": {
                                          "endpoint": "{{ .endpoint }}",
                                          "port": "{{ .port }}",
                                          "password": "{{ .password }}",
                                          "username": "{{ .username }}",
                                          "reader": reader,
                                          "database": appName,
                                      }
                                  },
                                  "data": [
                                      {
                                          "match": {
                                              "secretKey": k,
                                              "remoteRef": {
                                                  "remoteKey": _name,
                                                  "property": k,
                                              },
                                          },
                                      },
                                      for k in [
                                          "endpoint", "port", "password", "username", "reader", "database",
                                      ]
                                  ]
                                  "deletionPolicy": "Delete" if dp == "Delete" else "Retain",
                                  "selector": {
                                      "secret": {
                                          "name": _name,
                                      },
                                  },
                                  "updatePolicy": "Replace",
                              }
                          }
                      }
                      "managementPolicies": mgmtPolicy,
                      "providerConfigRef": {
                          "name": get(oxr, "spec.kubernetesProviderConfig.name", "")
                      }
                  }
              }
              for _, user in ["${appName}-rds-user"] + [
                  v for _, v in get(connectionSecrets, "users", {})
              ]
              if all_true([
                  get(oxr, "spec.eso.enabled", True),
                  get(oxr, "spec.eso.tenantCluster.apiServerEndpoint", []),
                  get(oxr, "spec.eso.tenantCluster.enabled", True),
              ])
          ]

          newdxr = {
              **dxr,
              **{
                  "status": {
                      "ready" = allReady()
                      "connectionSecrets" = connectionSecrets,
                  },
              },
          }

          provisionSql = get(oxr, "spec.provisionSql", True)
          _items = [
              i for r in [
                  providerConnectionSecret, databases,
                  users, grants, [newdxr], pushSecrets,
              ]
              for i in r if i and provisionSql
          ]

          items = _items
        target: ""
    step: function-provision-sql
  - functionRef:
      name: function-auto-ready
    step: function-auto-ready
