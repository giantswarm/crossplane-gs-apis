apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  creationTimestamp: null
  labels:
    component: database
    provider: aws
    type: base
  name: rds-cache-cluster
spec:
  compositeTypeRef:
    apiVersion: xcomposite.crossplane.giantswarm.io/v1alpha1
    kind: RdsCacheCluster
  mode: Pipeline
  pipeline:
  - functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.crossplane.io/v1beta1
      kind: Resources
      metadata:
        creationTimestamp: null
      patchSets:
      - name: metadata
        patches:
        - fromFieldPath: metadata.labels
          policy:
            toFieldPath: MergeObjects
          toFieldPath: metadata.labels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.region
          toFieldPath: metadata.labels.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef
          toFieldPath: spec.providerConfigRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
          type: FromCompositeFieldPath
      - name: commontags
        patches:
        - fromFieldPath: spec.tags
          policy:
            toFieldPath: MergeObjects
          toFieldPath: spec.forProvider.tags
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels
          policy:
            toFieldPath: MergeObjects
          toFieldPath: spec.forProvider.tags
          type: FromCompositeFieldPath
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.tags.region
          type: FromCompositeFieldPath
      resources:
      - base:
          apiVersion: xnetworks.crossplane.giantswarm.io/v1alpha1
          kind: PeeredVpcNetwork
          metadata:
            creationTimestamp: null
          spec:
            availabilityZones: null
            peering:
              allowPublic: false
              enabled: false
              groupBy: ""
              remoteVpcs: null
            ram:
              enabled: false
            region: ""
            subnetsets:
              cidrs: null
              function: ""
              ipam: false
              poolName: ""
            tags: {}
            transitGateway:
              accountId: ""
              allowPublic: false
              cidrBlocks: null
              enabled: false
              peers: null
              prefixList: null
              prefixLists: null
              region: ""
              remoteVpcs: null
              routeTableIds: null
              subnetIds: null
              vpcId: ""
          status:
            calculatedCidrs: null
            ready: false
            sharedSubnets: null
            subnetBits: null
            vpcLookup:
              enabled: false
              groupBy: ""
              remoteVpcs: null
        name: peered-vpc-network
        patches:
        - fromFieldPath: spec.vpc
          toFieldPath: spec
          type: FromCompositeFieldPath
        - fromFieldPath: spec.availabilityZones
          toFieldPath: spec.availabilityZones
          type: FromCompositeFieldPath
        - fromFieldPath: spec.claimRef
          toFieldPath: spec.claimRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
          type: FromCompositeFieldPath
        - fromFieldPath: spec.managementPolicies
          toFieldPath: spec.managementPolicies
          type: FromCompositeFieldPath
        - fromFieldPath: spec.region
          toFieldPath: spec.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef
          toFieldPath: spec.providerConfigRef
          type: FromCompositeFieldPath
        - fromFieldPath: status.vpcs.self
          toFieldPath: status.vpc
          type: ToCompositeFieldPath
      - base:
          apiVersion: xcache.crossplane.giantswarm.io/v1alpha1
          kind: CacheBase
          metadata:
            creationTimestamp: null
          spec:
            engine: null
            parameterGroupConfiguration:
              family: null
              name: null
            region: null
            vpcId: null
          status:
            userSecrets: {}
        name: cache-base
        patches:
        - fromFieldPath: spec.cache
          toFieldPath: spec
          type: FromCompositeFieldPath
        - fromFieldPath: spec.availabilityZones
          toFieldPath: spec.availabilityZones
          type: FromCompositeFieldPath
        - fromFieldPath: spec.claimRef
          toFieldPath: spec.claimRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
          type: FromCompositeFieldPath
        - fromFieldPath: spec.eso
          toFieldPath: spec.eso
          type: FromCompositeFieldPath
        - fromFieldPath: spec.kubernetesProviderConfig
          toFieldPath: spec.kubernetesProviderConfig
          type: FromCompositeFieldPath
        - fromFieldPath: spec.managementPolicies
          toFieldPath: spec.managementPolicies
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef
          toFieldPath: spec.providerConfigRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.region
          toFieldPath: spec.region
          type: FromCompositeFieldPath
        - fromFieldPath: status.vpc.id
          policy:
            fromFieldPath: Required
          toFieldPath: spec.vpcId
          type: FromCompositeFieldPath
        - fromFieldPath: status.clusterEndpoints
          toFieldPath: status.cacheClusterEndpoints
          type: ToCompositeFieldPath
        - fromFieldPath: status.endpoint
          toFieldPath: status.cacheEndpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.readerEndpoint
          toFieldPath: status.cacheReaderEndpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.globalConnectionSecret
          toFieldPath: status.cacheGlobalConnectionSecret
          type: ToCompositeFieldPath
        - fromFieldPath: status.globalEndpoint
          toFieldPath: status.cacheGlobalEndpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.globalReaderEndpoint
          toFieldPath: status.cacheGlobalReaderEndpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.port
          toFieldPath: status.cachePort
          type: ToCompositeFieldPath
      - base:
          apiVersion: xdatabase.crossplane.giantswarm.io/v1alpha1
          kind: RdsBase
          metadata:
            creationTimestamp: null
          spec:
            cidrBlocks: null
            dbClusterParameterGroup: null
            region: null
            subnetIds: null
            vpcId: null
          status:
            provisionedSecrets: {}
        name: rds-base
        patches:
        - fromFieldPath: spec.database
          toFieldPath: spec
          type: FromCompositeFieldPath
        - fromFieldPath: spec.availabilityZones
          toFieldPath: spec.availabilityZones
          type: FromCompositeFieldPath
        - fromFieldPath: spec.claimRef
          toFieldPath: spec.claimRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
          type: FromCompositeFieldPath
        - fromFieldPath: spec.eso
          toFieldPath: spec.eso
          type: FromCompositeFieldPath
        - fromFieldPath: spec.kubernetesProviderConfig
          toFieldPath: spec.kubernetesProviderConfig
          type: FromCompositeFieldPath
        - fromFieldPath: spec.managementPolicies
          toFieldPath: spec.managementPolicies
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef
          toFieldPath: spec.providerConfigRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.region
          toFieldPath: spec.region
          type: FromCompositeFieldPath
        - fromFieldPath: status.vpc.id
          policy:
            fromFieldPath: Required
          toFieldPath: spec.vpcId
          type: FromCompositeFieldPath
        - fromFieldPath: status.endpoint
          toFieldPath: status.rdsEndpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.port
          toFieldPath: status.rdsPort
          type: ToCompositeFieldPath
        - fromFieldPath: status.readerEndpoint
          toFieldPath: status.rdsReaderEndpoint
          type: ToCompositeFieldPath
    step: patch-and-transform
  - functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        creationTimestamp: null
      spec:
        source: |-
          import regex

          oxr = option("params").oxr
          dxr = option("params").dxr
          ocds = option("params").ocds
          dcds = option("params").dcds

          get = lambda x: {:}, y: str, d: any -> any {
              """
              Get an item from a dictionary using a dot separated path.
              If the item is not found, return a default value.
              """
              p = regex.split(y, "\.")
              c = p[0]
              y = ".".join(p[1:])
              x[c] if len(p) == 1 and c in x else d if c not in x else get(x[c], y, d)
          }

          exists = lambda x: any -> bool {
              """
              Check if a value exists.
              """
              x in list(ocds)
          }

          ocdsstatus = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the status of an ocds resource.
              """
              _x = None
              if get(ocds, "${x}.Resource.status.atProvider", False):
                  _x = get(ocds, "${x}.Resource.status.atProvider.${y}", d)
              else:
                  _x = get(ocds, "${x}.Resource.status.${y}", d)
              _x if _x else d
          }

          ready = lambda x: str -> bool {
              """
              Check if a value is ready.
              """
              conditionsReady = all_true([
                  get(c, "status", "False") == "True" for c in ocdsstatus(x, "conditions", [])
              ])

              ap = get(ocds, "${x}.Resource.status.atProvider", {})
              objectReady = any_true([
                  ocdsstatus(x, "ready", False),
                  len(list(ap)) > 0,
              ])

              all_true([
                  any_true([exists(x), conditionsReady]),
                  objectReady,
              ])
          }

          readystr = lambda x: str -> str {
              """
              Check if a value is ready.
              """
              "True" if ready(x) else "False"
          }

          allReady = lambda -> bool {
              """
              Check if all managed resources are ready.
              """
              all_true([
                  ready(x)
                  for x in list(ocds)
              ])
          }

          # AppName here must be all lowercase with all symbols removed
          appName = get(oxr, "spec.claimRef.name", "")
          dp = get(oxr, "spec.deletionPolicy", "Delete")
          mgmtPolicy = get(oxr, "spec.managementPolicies", [])
          namespace = get(oxr, "spec.claimRef.namespace", "default")
          pcr = get(oxr, "spec.providerConfigRef", {"name": "default"})

          ssasecret = get(oxr, "spec.eso.fluxSSASecretName", "")
          # The resource created here is to enable switching Flux SSA from `Ignore` to
          # `Merge`.
          #
          # This allows Flux to ignore the creation of resources until the related
          # infrastructure has been created and is ready.
          #
          # To enable this, Any resources created by Flux kustomization should have the
          # annotation `kustomize.toolkit.fluxcd.io/ssa: ${PROJECT_NAME_SSA:=Ignore}`.
          #
          # This will then force SSA to `Ingore` the resource by default.
          #
          # Next, the flux kusomization should have its `postBuild` set up like follows:
          #
          # ```yaml
          # postBuild:
          #   substitute:
          #     var_substitution_enabled: "true"
          #   substituteFrom:
          #   - kind: Secret
          #     name: flux-project-ssa
          # ```
          fluxSsa = {
              "apiVersion": "kubernetes.crossplane.io/v1alpha2"
              "kind": "Object"
              "metadata": {
                  "annotations": {
                      "krm.kcl.dev/composition-resource-name" = "${appName}-externalsecret"
                      "krm.kcl.dev/ready": readystr("${appName}-externalsecret")
                  }
              }
              "spec": {
                  "deletionPolicy": dp,
                  "forProvider": {
                      "manifest": {
                          "apiVersion": "external-secrets.io/v1beta1",
                          "kind": "ExternalSecret",
                          "metadata": {
                              "name": "${appName}-flux-ssa",
                              "namespace": namespace,
                          },
                          "spec": {
                              "refreshInterval": "1m",
                              "secretStoreRef": {
                                  "name": get(oxr, "spec.eso.kubernetesSecretStore", ""),
                                  "kind": "SecretStore",
                              },
                              "dataFrom": [
                                  {
                                      "find": {
                                          "name": {
                                              "regexp": "^${ssasecret}$",
                                          },
                                      },
                                      "rewrite": [
                                          {
                                              "regexp": {
                                                  "source": "(.*)",
                                                  "target": "$1",
                                              },
                                          },
                                      ],
                                  },
                              ],
                              "target": {
                                  "name": ssasecret,
                                  "creationPolicy": "Orphan",
                                  "deletionPolicy": "Merge",
                                  "template": {
                                      "engineVersion": "v2",
                                      "mergePolicy": "Merge",
                                      "data": {
                                          "${ssasecret}": "",
                                          _name = regex.replace(appName, "[-_\.]", "_").lower()
                                          "${_name}" = "Merge",
                                      },
                                  }
                              }
                          }
                      }
                  }
                  "managementPolicies": mgmtPolicy,
                  "providerConfigRef": get(oxr, "spec.kubernetesProviderConfig", {"name": "default"}),
              }
          } if all_true([
              get(oxr, "spec.eso.enabled", False),
              get(oxr, "spec.eso.fluxSSASecretName", False),
              get(oxr, "status.cacheConnectionSecret", False),
              get(oxr, "status.rdsConnectionSecret", False),
              ready("peered-vpc-network"),
              ready("cache-base"),
              ready("rds-base"),
          ]) else {}

          clusterName = get(oxr, "spec.eso.tenantCluster.clusterName", "")

          tenantSecretStore = {
              "apiVersion": "kubernetes.crossplane.io/v1alpha2"
              "kind": "Object"
              "metadata": {
                  "annotations": {
                      "krm.kcl.dev/composition-resource-name": "tenant-secret-store"
                      "krm.kcl.dev/ready": readystr("tenant-secret-store")
                  }
              }
              "spec": {
                  "deletionPolicy": get(oxr, "spec.deletionPolicy", "Delete")
                  "forProvider": {
                      "manifest": {
                          "apiVersion": "external-secrets.io/v1beta1"
                          "kind": "SecretStore"
                          "metadata": {
                              "name": "${appName}-tenant-secret-store"
                              "namespace": get(oxr, "spec.claimRef.namespace", "")
                          }
                          "spec": {
                              "provider": {
                                  "kubernetes": {
                                      "auth": {
                                          "cert": {
                                              "clientCert": {
                                                  "name": "${clusterName}-eso-cluster-auth",
                                                  "key": "tls.crt",
                                              },
                                              "clientKey": {
                                                  "name": "${clusterName}-eso-cluster-auth",
                                                  "key": "tls.key",
                                              },
                                          }
                                      }
                                      "remoteNamespace": get(oxr, "spec.eso.tenantCluster.namespace", "default")
                                      "server": {
                                          "caProvider": {
                                              "key": "ca.crt",
                                              "name": "${clusterName}-eso-cluster-auth",
                                              "type": "Secret"
                                          }
                                          _url = get(oxr, "spec.eso.tenantCluster.apiServerEndpoint", "kubernetes.default")
                                          "url": "https://${_url}"
                                      }
                                  }
                              }
                          }
                      }
                  }
                  "managementPolicies": get(oxr, "spec.managementPolicies", []),
                  "providerConfigRef": get(oxr, "spec.kubernetesProviderConfig", {"name": "default"})
              }
          } if all_true([
              get(oxr, "spec.eso.enabled", False),
              get(oxr, "spec.eso.tenantCluster.enabled", False),
              clusterName,
          ]) else {}

          _items = [
              c for c in [
                  fluxSsa,
                  tenantSecretStore,
              ] if c
          ]

          items = _items
        target: ""
    step: function-kcl-create-eso-secret
  - functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        creationTimestamp: null
      spec:
        source: |-
          import regex

          oxr = option("params").oxr
          dxr = option("params").dxr
          ocds = option("params").ocds
          dcds = option("params").dcds

          get = lambda x: {:}, y: str, d: any -> any {
              """
              Get an item from a dictionary using a dot separated path.
              If the item is not found, return a default value.
              """
              p = regex.split(y, "\.")
              c = p[0]
              y = ".".join(p[1:])
              x[c] if len(p) == 1 and c in x else d if c not in x else get(x[c], y, d)
          }

          exists = lambda x: any -> bool {
              """
              Check if a value exists.
              """
              x in list(ocds)
          }

          ocdsstatus = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the status of an ocds resource.
              """
              _x = None
              if get(ocds, "${x}.Resource.status.atProvider", False):
                  _x = get(ocds, "${x}.Resource.status.atProvider.${y}", d)
              else:
                  _x = get(ocds, "${x}.Resource.status.${y}", d)
              _x if _x else d
          }

          ready = lambda x: str -> bool {
              """
              Check if a value is ready.
              """
              conditionsReady = all_true([
                  get(c, "status", "False") == "True" for c in ocdsstatus(x, "conditions", [])
              ])

              ap = get(ocds, "${x}.Resource.status.atProvider", {})
              objectReady = any_true([
                  ocdsstatus(x, "ready", False),
                  len(list(ap)) > 0,
              ])

              all_true([
                  any_true([exists(x), conditionsReady]),
                  objectReady,
              ])
          }

          readystr = lambda x: str -> str {
              """
              Check if a value is ready.
              """
              "True" if ready(x) else "False"
          }

          allReady = lambda -> bool {
              """
              Check if all managed resources are ready.
              """
              all_true([
                  ready(x)
                  for x in list(ocds)
              ])
          }

          # AppName here must be all lowercase with all symbols removed
          appName = get(oxr, "spec.claimRef.name", "")
          dp = get(oxr, "spec.deletionPolicy", "Delete")
          mgmtPolicy = get(oxr, "spec.managementPolicies", [])
          namespace = get(oxr, "spec.claimRef.namespace", "default")
          pcr = get(oxr, "spec.providerConfigRef", {"name": "default"})

          _subnets = get(oxr, "status.vpc.privateSubnets", [])

          _dbsnindex = get(oxr, "spec.subnetGroupIndexes.database", False)

          _dbSnIds = [
              k.id
              for _, k in _subnets[_dbsnindex]
          ] if all_true([
              _dbsnindex != False,
              _subnets,
              len(_subnets) > _dbsnindex
          ]) else []

          _cachesnindex = get(oxr, "spec.subnetGroupIndexes.cache", False)
          _cacheSnIds = [
              k.id
              for _, k in _subnets[_cachesnindex]
          ] if all_true([
              _cachesnindex != False,
              _subnets,
              len(_subnets) > _cachesnindex
          ]) else []


          vpcs = ocdsstatus("peered-vpc-network", "vpcs", {})

          cidrBlocks = [
              i for r in [
                  [ get(vpc, "cidrBlock", "") ] + get(vpc, "additionalCidrBlocks", [])
                  for _, vpc in vpcs
              ]
              for i in r if i
          ]

          secretStores = get(oxr, "spec.eso.stores", []) + [
              {
                  "name" = "${appName}-tenant-secret-store",
                  "enabled" = True
                  "isClusterSecretStore" = False
              }
          ]

          eso = get(oxr, "spec.eso", {}) | {
              "stores" = secretStores,
          }

          _dbPatch = {
              **get(dcds, "rds-base.Resource", {}),
              **{
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name" = "rds-base"
                      }
                  }
                  "spec": {
                      "eso" = eso,
                      "cidrBlocks": cidrBlocks,
                      "subnetIds": _dbSnIds,
                  }
              }
          } if all_true([
              _dbSnIds,
              get(ocds, "rds-base.Resource", False),
              get(oxr, "status.vpc.id", False),
          ]) else {}

          _cachePatch = {
              **get(dcds, "cache-base.Resource", {}),
              **{
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name" = "cache-base"
                      }
                  }
                  "spec": {
                      "eso" = eso,
                      "cidrBlocks": cidrBlocks,
                      "subnetIds": _cacheSnIds
                  }
              }
          } if all_true([
              _cacheSnIds,
              get(ocds, "cache-base.Resource", False),
              get(oxr, "spec.cache", False),
              get(oxr, "status.vpc.id", False),
          ]) else {}

          cacheConnectionSecret = ocdsstatus("cache-base", "userSecrets.app", ocdsstatus("cache-base", "connectionSecret", ""))
          rdsConnectionSecret = ocdsstatus("rds-base", "provisionedSecrets.app", ocdsstatus("rds-base", "connectionSecret", ""))

          newdxr = {
              **oxr,
              **{
                  "status" = {
                      "ready" = allReady(),
                      "cacheConnectionSecret" = cacheConnectionSecret,
                      "rdsConnectionSecret" = rdsConnectionSecret,
                  },
              },
          }

          items = [
              k for k in [_dbPatch, _cachePatch, newdxr] if k
          ]
        target: ""
    step: function-kcl-dynamic-patch
  - functionRef:
      name: function-auto-ready
    step: function-auto-ready
