apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  creationTimestamp: null
  labels:
    component: aws
    provider: aws
    type: regionlookup
  name: rcc-with-region-lookup
spec:
  compositeTypeRef:
    apiVersion: xcomposite.crossplane.giantswarm.io/v1alpha1
    kind: RCCWithRegionLookup
  mode: Pipeline
  pipeline:
  - functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.crossplane.io/v1beta1
      kind: Resources
      metadata:
        creationTimestamp: null
      resources:
      - base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            creationTimestamp: null
          spec:
            forProvider:
              manifest:
                apiVersion: cluster.x-k8s.io/v1beta1
                kind: Cluster
                metadata:
                  creationTimestamp: null
                  name: test-cluster
                  namespace: test-namespace
                spec:
                  controlPlaneEndpoint:
                    host: ""
                    port: 0
                status:
                  controlPlaneReady: false
                  infrastructureReady: false
            managementPolicies:
            - Observe
            readiness: {}
          status:
            atProvider:
              manifest: null
        name: cluster-lookup
        patches:
        - fromFieldPath: spec.clusterDiscovery.name
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.clusterDiscovery.namespace
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          type: FromCompositeFieldPath
        - fromFieldPath: spec.kubernetesProviderConfigRef
          toFieldPath: spec.providerConfigRef
          type: FromCompositeFieldPath
      - base:
          apiVersion: xcomposite.crossplane.giantswarm.io/v1alpha1
          kind: RdsCacheCluster
          metadata:
            creationTimestamp: null
          spec:
            availabilityZones: null
            cache:
              engine: null
              parameterGroupConfiguration:
                family: null
                name: null
            database:
              dbClusterParameterGroup: null
            kubernetesProviderConfig: null
            region: ""
            subnetGroupIndexes:
              cache: 0
              database: 0
            vpc:
              peering:
                allowPublic: false
                enabled: false
                groupBy: ""
                remoteVpcs: null
              subnetsets:
                cidrs: null
                function: ""
              tags: {}
              transitGateway:
                allowPublic: false
                cidrBlocks: null
                enabled: false
                peers: null
                prefixList: null
                prefixLists: null
                ram:
                  allowExternalPrincipals: false
                  enabled: false
                  principals: null
                region: ""
                remoteVpcs: null
                routeTableIds: null
                subnetIds: null
                vpcId: ""
          status:
            vpc: {}
        name: rds-cache-cluster
        patches:
        - fromFieldPath: spec.rdsCacheClusterParameters
          toFieldPath: spec
          type: FromCompositeFieldPath
        - fromFieldPath: spec.claimRef
          toFieldPath: spec.claimRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef
          toFieldPath: spec.providerConfigRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.kubernetesProviderConfig
          toFieldPath: spec.kubernetesProviderConfig
          type: FromCompositeFieldPath
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
          type: FromCompositeFieldPath
        - fromFieldPath: spec.managementPolicies
          toFieldPath: spec.managementPolicies
          type: FromCompositeFieldPath
        - fromFieldPath: status.region
          policy:
            fromFieldPath: Required
          toFieldPath: spec.region
          type: FromCompositeFieldPath
        - fromFieldPath: status.availabilityZones
          policy:
            fromFieldPath: Required
          toFieldPath: spec.availabilityZones
          type: FromCompositeFieldPath
        - fromFieldPath: status.cacheClusterEndpoints
          toFieldPath: status.cacheClusterEndpoints
          type: ToCompositeFieldPath
        - fromFieldPath: status.cacheConnectionSecret
          toFieldPath: status.cacheConnectionSecret
          type: ToCompositeFieldPath
        - fromFieldPath: status.cacheEndpoint
          toFieldPath: status.cacheEndpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.cacheGlobalConnectionSecret
          toFieldPath: status.cacheGlobalConnectionSecret
          type: ToCompositeFieldPath
        - fromFieldPath: status.cacheGlobalEndpoint
          toFieldPath: status.cacheGlobalEndpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.cacheGlobalReaderEndpoint
          toFieldPath: status.cacheGlobalReaderEndpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.cachePort
          toFieldPath: status.cachePort
          type: ToCompositeFieldPath
        - fromFieldPath: status.cacheReaderEndpoint
          toFieldPath: status.cacheReaderEndpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.cacheSubnets
          toFieldPath: status.cacheSubnets
          type: ToCompositeFieldPath
        - fromFieldPath: status.rdsConnectionSecret
          toFieldPath: status.rdsConnectionSecret
          type: ToCompositeFieldPath
        - fromFieldPath: status.rdsEndpoint
          toFieldPath: status.rdsEndpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.rdsPort
          toFieldPath: status.rdsPort
          type: ToCompositeFieldPath
        - fromFieldPath: status.rdsSubnets
          toFieldPath: status.rdsSubnets
          type: ToCompositeFieldPath
        - fromFieldPath: status.vpc
          toFieldPath: status.vpc
          type: ToCompositeFieldPath
    step: patch-and-transform
  - functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        creationTimestamp: null
      spec:
        source: |-
          import regex

          oxr = option("params").oxr
          dxr = option("params").dxr
          ocds = option("params").ocds
          dcds = option("params").dcds

          get = lambda x: {:}, y: str, d: any -> any {
              """
              Get an item from a dictionary using a dot separated path.
              If the item is not found, return a default value.
              """
              p = regex.split(y, "\.")
              c = p[0]
              y = ".".join(p[1:])
              x[c] if len(p) == 1 and c in x else d if c not in x else get(x[c], y, d)
          }

          exists = lambda x: any -> bool {
              """
              Check if a value exists.
              """
              x in list(ocds)
          }

          ocdsstatus = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the status of an ocds resource.
              """
              _x = None
              if get(ocds, "${x}.Resource.status.atProvider", False):
                  _x = get(ocds, "${x}.Resource.status.atProvider.${y}", d)
              else:
                  _x = get(ocds, "${x}.Resource.status.${y}", d)
              _x if _x else d
          }

          ready = lambda x: str -> bool {
              """
              Check if a value is ready.
              """
              conditionsReady = all_true([
                  get(c, "status", "False") == "True" for c in ocdsstatus(x, "conditions", [])
              ])

              ap = get(ocds, "${x}.Resource.status.atProvider", {})
              objectReady = any_true([
                  ocdsstatus(x, "ready", False),
                  len(list(ap)) > 0,
              ])

              all_true([
                  any_true([exists(x), conditionsReady]),
                  objectReady,
              ])
          }

          readystr = lambda y: str -> str {
              """
              Check if a value is ready.
              """
              "True" if ready(y) else "False"
          }

          allReady = lambda -> bool {
              """
              Check if all managed resources are ready.
              """
              all_true([
                  ready(x)
                  for x in list(ocds)
              ])
          }

          clusterLookup = get(ocds, "cluster-lookup.Resource", {})

          apiVersion = get(clusterLookup, "status.atProvider.manifest.spec.infrastructureRef.apiVersion", "")
          kind = get(clusterLookup, "status.atProvider.manifest.spec.infrastructureRef.kind", "")
          name = get(clusterLookup, "status.atProvider.manifest.metadata.name", "")
          namespace = get(clusterLookup, "status.atProvider.manifest.metadata.namespace", "")

          if kind:
              assert kind in ["AWSCluster", "AWSManagedCluster"], "Unsupported kind: ${kind}"

          awsClusterObject = {} if not clusterLookup else {
              apiVersion: apiVersion,
              kind: kind,
              metadata: {
                  "name": name,
                  "namespace": namespace,
              }
          }

          kubernetesObject = {
              "apiVersion": "kubernetes.crossplane.io/v1alpha2",
              "kind": "Object"
              "metadata": {
                  "annotations": {
                      "krm.kcl.dev/composition-resource-name" = "aws-cluster"
                      "krm.kcl.dev/ready": readystr("aws-cluster")
                  }
              }
              "spec": {
                  "managementPolicies": ["Observe"],
                  "forProvider": {
                      "manifest": awsClusterObject,
                  }
                  "providerConfigRef": get(oxr, "spec.kubernetesProviderConfigRef", {"name": "default"}),
              }
          } if awsClusterObject else {}

          region = get(ocds, "aws-cluster.Resource.status.atProvider.manifest.spec.region", False)
          availabilityZones = {} if not region else {
              regex.replace(k.availabilityZone, region, "") = False
              for k in get(ocds, "aws-cluster.Resource.status.atProvider.manifest.spec.network.subnets", [])
          }

          newdxr = {
              **dxr,
              **{
                  "status": {
                      "region" = region
                      "availabilityZones" = sorted([k for k, _ in availabilityZones])
                      "ready" = allReady()
                  }
              },
          } if region and availabilityZones else {}

          items = [i for i in [kubernetesObject, newdxr] if i]
        target: ""
    step: function-kcl-resources
  - functionRef:
      name: function-auto-ready
    step: function-auto-ready
