apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  creationTimestamp: null
  labels:
    component: elasticache
    provider: aws
    type: base
  name: cache-base
spec:
  compositeTypeRef:
    apiVersion: xcache.crossplane.giantswarm.io/v1alpha1
    kind: CacheBase
  mode: Pipeline
  pipeline:
  - functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.crossplane.io/v1beta1
      kind: Resources
      metadata:
        creationTimestamp: null
      patchSets:
      - name: metadata
        patches:
        - fromFieldPath: metadata.labels
          policy:
            toFieldPath: MergeObjects
          toFieldPath: metadata.labels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.region
          toFieldPath: metadata.labels.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef
          toFieldPath: spec.providerConfigRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
          type: FromCompositeFieldPath
      - name: commontags
        patches:
        - fromFieldPath: spec.tags
          policy:
            toFieldPath: MergeObjects
          toFieldPath: spec.forProvider.tags
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels
          policy:
            toFieldPath: MergeObjects
          toFieldPath: spec.forProvider.tags
          type: FromCompositeFieldPath
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.tags.region
          type: FromCompositeFieldPath
      resources:
      - base:
          apiVersion: kms.aws.upbound.io/v1beta1
          kind: Key
          metadata:
            creationTimestamp: null
          spec:
            forProvider:
              region: null
            initProvider: {}
          status:
            atProvider: {}
        name: kms
        patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: status.atProvider.arn
          toFieldPath: status.kmsKeyId
          type: ToCompositeFieldPath
        - combine:
            strategy: string
            string:
              fmt: '%s-%s'
            variables:
            - fromFieldPath: spec.claimRef.name
            - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.tags.Name
          type: CombineFromComposite
        - patchSetName: commontags
          type: PatchSet
        - patchSetName: metadata
          type: PatchSet
      - base:
          apiVersion: elasticache.aws.upbound.io/v1beta1
          kind: SubnetGroup
          metadata:
            creationTimestamp: null
          spec:
            forProvider:
              region: null
            initProvider: {}
          status:
            atProvider: {}
        name: subnetgroup
        patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.subnetIds
          policy:
            fromFieldPath: Required
          toFieldPath: spec.forProvider.subnetIds
          type: FromCompositeFieldPath
        - patchSetName: commontags
          type: PatchSet
        - patchSetName: metadata
          type: PatchSet
        - fromFieldPath: status.atProvider.id
          toFieldPath: status.subnetGroupName
          type: ToCompositeFieldPath
        - combine:
            strategy: string
            string:
              fmt: '%s %s elasticache subnet group'
            variables:
            - fromFieldPath: spec.claimRef.name
            - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.description
          type: CombineFromComposite
      - base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroup
          metadata:
            creationTimestamp: null
          spec:
            forProvider:
              region: null
              revokeRulesOnDelete: true
            initProvider: {}
          status:
            atProvider: {}
        name: securitygroup
        patches:
        - fromFieldPath: spec.vpcId
          toFieldPath: spec.forProvider.vpcId
          type: FromCompositeFieldPath
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - patchSetName: commontags
          type: PatchSet
        - patchSetName: metadata
          type: PatchSet
        - combine:
            strategy: string
            string:
              fmt: '%s %s elasticache security group'
            variables:
            - fromFieldPath: spec.claimRef.name
            - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.description
          type: CombineFromComposite
        - fromFieldPath: status.atProvider.id
          toFieldPath: status.securityGroupId
          type: ToCompositeFieldPath
    step: patch-and-transform
  - functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        creationTimestamp: null
      spec:
        source: |-
          import regex

          _oxr = option("params").oxr
          _dxr = option("params").dxr
          _ocds = option("params").ocds
          _dcds = option("params").dcds

          get = lambda x: {:}, y: str, d: any -> any {
              """
              Get an item from a dictionary using a dot separated path.
              If the item is not found, return a default value.

              x: The dictionary to search in.
              y: The path to search for.
              d: The default value to return if the path is not found.
              """
              p = regex.split(y, "\.")
              c = p[0]
              y = ".".join(p[1:])
              x[c] if len(p) == 1 and c in x else d if c not in x else get(x[c], y, d)
          }

          getwparent = lambda x: {:}, p: {:}, y: str, d: any -> any {
              """
              Get with fallback to parent
              Tries to get a path from a dictionary, if it fails,
              tries to get it from the parent dictionary.

              If that fails, falls back to the default value provided.
              """
              get(x, y, get(p, "spec.${y}", d))
          }

          ocdsspec = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the spec of an ocds resource.
              """
              get(_ocds, "${x}.Resource.spec.${y}", d)
          }

          ocdsstatus = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the status of an ocds resource.
              """
              get(_ocds, "${x}.Resource.status.atProvider.${y}", d)
          }

          ready = lambda x: str -> bool {
              """
              Check if a value is ready.
              """
              conditions = get(_ocds, "${x}.Resource.status.conditions", [])
              all_true([
                  get(c, "status", "False") == "True" for c in conditions
              ])
          }

          readystr = lambda x: str -> str {
              """
              Check if a value is ready.
              """
              "True" if ready(x) else "False"
          }

          appName = get(_oxr, "spec.claimRef.name", "")
          createReplicationGroup = get(_oxr, "spec.createReplicationGroup", True)
          dp = get(_oxr, "spec.deletionPolicy", "Delete")
          keyId = get(_oxr, "status.kmsKeyId", False)
          namespace = get(_oxr, "spec.claimRef.namespace", "default")
          region = get(_oxr, "spec.region", "eu-central-1")
          pcr = get(_oxr, "spec.providerConfigRef", {"name": "default"})
          azs = [
              "${region}${az}"
              for az in get(_oxr, "spec.availabilityZones", [])
          ]
          labels = get(_oxr, "metadata.labels", {}) | {"region": region}

          tags = labels | get(_oxr, "spec.tags", {})

          globalEnabled = all_true([
              False,
              createReplicationGroup,
              get(_oxr, "spec.globalReplicationGroup.enabled", False)
          ])

          userNames = get(_oxr, "spec.userNames", []) + [appName, "default"]

          if get(_oxr, "spec.createReplicationGroup", False):
              assert get(_oxr, "spec.engine", "redis") == "redis", "engine must be redis when createReplicationGroup is true"

          created = get(_ocds, "elasticache-replication-group.Resource", {})
          clusterModeEnabled = get(_oxr, "spec.clusterMode.enabled", False)
          ipgn = get(_oxr, "status.parameterGroupName", "") if get(_oxr, "spec.allowMajorVersionUpgrade", False) else ""

          securityGroupIds = [
              get(_oxr, "status.securityGroupId", None),
          ] + [
              i for r in get(_oxr, "spec.securityGroupIds", []) for i in r
          ]

          subnetGroup = get(_oxr, "status.subnetGroupName", False)

          # Currently Crossplane does not support the GlobalReplicationGroup resource
          #
          # Until this CRD is implemented, we will be defining, but force disabling the
          # following block - this saves having to extend the composition to support this
          # in the future but would just require re-enabling the block by removing `False`
          # from the `all_true` check.
          # https://github.com/crossplane-contrib/provider-upjet-aws/issues/1333

          # In order to create a global replication group, we must be creating a
          # local replication group as well. Global is secondary.
          primaryGlobalRID = get(_oxr, "spec.globalReplicationGroupId", "") if globalEnabled else ""
          replicationGlobalRID = get(_oxr, "status.globalReplicationGroupId", "") if globalEnabled else get(_oxr, "spec.globalReplicationGroupId", "")

          parameterGroup = [
              {
                  "apiVersion": "elasticache.aws.upbound.io/v1beta1"
                  "kind": "ParameterGroup"
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name": "elasticache-parameter-group"
                          "krm.kcl.dev/ready": readystr("elasticache-parameter-group")
                          "crossplane.io/external-name": appName
                      }
                      "labels": labels
                  }
                  "spec": {
                      "deletionPolicy": dp
                      "forProvider": {
                          "description": appName + " Parameter Group"
                          "family": get(_oxr, "spec.parameterGroupFamily", "redis6.x")
                          "name": appName + "-parameter-group"
                          if get(_oxr, "spec.parameters", False):
                              "parameter" = [
                                  {
                                      name: k,
                                      value: v,
                                  }
                                  for k, v in get(_oxr, "spec.parameterGroupConfiguration.parameters", {})
                              ]
                          "region" = region
                          "tags" = tags | {
                              "Name": "${appName}-${region}"
                          } | get(_oxr, "spec.parameterGroupConfiguration.tags", {})
                      }
                      "providerConfigRef": pcr
                  }
              }
          ] if get(_oxr, "spec.parameterGroupConfiguration", False) else []

          globalReplicationGroup = [{
              "apiVersion": "elasticache.aws.upbound.io/v1beta1"
              "kind": "GlobalReplicationGroup"
              "metadata": {
                  "annotations": {
                      "krm.kcl.dev/composition-resource-name": "global-elasticache-replication-group"
                      "krm.kcl.dev/ready": readystr("global-elasticache-replication-group")
                      "crossplane.io/external-name": appName
                  }
                  "labels": labels
              }
              "spec": {
                  "deletionPolicy": dp
                  "forProvider": {
                      "automaticFailoverEnabled": get(_oxr, "spec.globalReplicationGroup.automaticFailoverEnabled", False)
                      "cacheNodeType": get(_oxr, "spec.globalReplicationGroup.cacheNodeType", "cache.t3.micro")
                      "globalReplicationGroupIdSuffix": get(_oxr, "spec.globalReplicationGroup.suffix", "")
                      "globalReplicationGroupDescription": appName + " Global Replication Group"
                      if get(_oxr, "spec.globalReplicationGroup.numNodeGroups", False):
                          "numNodeGroups": get(_oxr, "spec.globalReplicationGroup.numNodeGroups", 1)

                      if primaryGlobalRID:
                          "primaryReplicationGroupId": primaryGlobalRID

                      "region": region

                      "tags": tags | {
                          "Name": "${appName}-${region}-global"
                      }
                  }
                  "providerConfigRef": pcr
              }
          }] if globalEnabled else []

          enabledReplicationGroups = [
              "global" if globalEnabled else "",
              # We don't want to create the local replication group if global replication
              # is enabled until the GlobalReplicationGroup is ready.
              "local" if any_true([
                  all_true([
                      globalEnabled,
                      ready("global-elasticache-replication-group"),
                  ]),
                  not globalEnabled,
              ]) else "",
          ]

          replicationGroups = [
              {
                  "apiVersion": "elasticache.aws.upbound.io/v1beta2"
                  "kind": "ReplicationGroup"
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name": "elasticache-replication-group-${i}"
                          "krm.kcl.dev/ready": readystr("elasticache-replication-group-${i}")
                          "crossplane.io/external-name": "${appName}-${i}"
                      }
                      "labels": labels
                  }
                  "spec": {
                      "deletionPolicy": dp
                      "initProvider": {
                          if get(_oxr, "spec.autoMinorVersionUpgrade", False):
                              if get(_oxr, "spec.engineVersion", False):
                                  "engineVersion": get(_oxr, "spec.engineVersion", "")
                      }
                      "forProvider": {
                          if get(_oxr, "spec.applyImmediately", None) != None:
                              "applyImmediately": get(_oxr, "spec.applyImmediately", True)

                          "atRestEncryptionEnabled" = get(_oxr, "spec.atRestEncryptionEnabled", True)

                          if get(_oxr, "spec.transitEncryptionEnabled", False):
                              "autoGenerateAuthToken": True
                              "authTokenSecretRef": {
                                  "key": "token"
                                  "name": "${appName}-elasticache-auth-token"
                                  "namespace": get(_oxr, "spec.claimRef.namespace", "default")
                              }
                              "transitEncryptionEnabled": get(_oxr, "spec.transitEncryptionEnabled", True)

                          if get(_oxr, "spec.authTokenUpdateStrategy", False):
                              "authTokenUpdateStrategy": get(_oxr, "spec.authTokenUpdateStrategy", "ROTATE")
                          if get(_oxr, "spec.autoMinorVersionUpgrade", None) != None:
                              "autoMinorVersionUpgrade": get(_oxr, "spec.autoMinorVersionUpgrade", True)
                          if get(_oxr, "spec.automaticFailoverEnabled", None) != None:
                              "automaticFailoverEnabled": get(_oxr, "spec.automaticFailoverEnabled", False)
                          if get(_oxr, "spec.dataTieringEnabled", False):
                              "dataTieringEnabled": get(_oxr, "spec.dataTieringEnabled", False)

                          if i == "global":
                              "description": appName + " Replication Group ${region} (Global)"

                          if i == "local":
                              "description": appName + " Replication Group ${region} (Local)"

                          if get(_oxr, "spec.engine", False):
                              "engine": get(_oxr, "spec.engine", "redis")

                          if not get(_oxr, "spec.autoMinorVersionUpgrade", False):
                              if get(_oxr, "spec.engineVersion", False):
                                  "engineVersion": get(_oxr, "spec.engineVersion", "7.x")

                          if get(_oxr, "spec.finalSnapshotIdentifier", False):
                              "finalSnapshotIdentifier": get(_oxr, "spec.finalSnapshotIdentifier", "")

                          if replicationGlobalRID:
                              "globalReplicationGroupId": replicationGlobalRID

                          if get(_oxr, "spec.ipDiscovery", False):
                              "ipDiscovery": get(_oxr, "spec.ipDiscovery", "ipv4")

                          "kmsKeyId": keyId

                          if get(_oxr, "spec.maintenanceWindow", False):
                              "maintenanceWindow": get(_oxr, "spec.maintenanceWindow", "")
                          if get(_oxr, "spec.multiAzEnabled", None) != None:
                              "multiAzEnabled": get(_oxr, "spec.multiAzEnabled", True)
                          if get(_oxr, "spec.networkType", False):
                              "networkType": get(_oxr, "spec.networkType", "ipv4")

                          if get(_oxr, "spec.notificationTopicArn", False):
                              "notificationTopicArn": get(_oxr, "spec.notificationTopicArn", "")

                          if all_true([
                              get(_oxr, "spec.numCacheClusters", False),
                              not get(_oxr, "spec.numNodeGroups", False),
                              not clusterModeEnabled
                          ]):
                              "numCacheClusters": get(_oxr, "spec.numCacheClusters", 1)

                          # numNodeGroups cannot be set if global replication group id is set
                          if any_true([
                              get(_oxr, "spec.globalReplicationGroupId", False),
                              i == "global"
                              all_true([
                                  not get(_oxr, "spec.globalReplicationGroup.enabled", False),
                                  not get(_oxr, "spec.globalReplicationGroupId", False),
                                  i == "local"
                              ])
                          ]):
                              if get(_oxr, "spec.nodeType", False):
                                  "nodeType": get(_oxr, "spec.nodeType", "cache.t3.micro")
                              if all_true([
                                  clusterModeEnabled,
                                  get(_oxr, "spec.numNodeGroups", False)
                              ]):
                                  "numNodeGroups": get(_oxr, "spec.numNodeGroups", 1)
                          if ipgn:
                              "parameterGroupName": ipgn

                          if get(_oxr, "spec.port", False):
                              "port": get(_oxr, "spec.port", 6379)

                          if azs:
                              "preferredCacheClusterAzs": azs

                          if get(_oxr, "spec.replicasPerNodeGroup", None) != None:
                              "replicasPerNodeGroup": get(_oxr, "spec.replicasPerNodeGroup", 0)

                          "region": region

                          if securityGroupIds:
                              "securityGroupIds": [i for i in securityGroupIds if i]

                          if any_true([
                              all_true([
                                  i == "global",
                                  get(_oxr, "status.subnetGroupName", False),
                              ]),
                              all_true([
                                  not get(_oxr, "spec.globalReplicationGroup.enabled", False),
                                  i == "local",
                                  get(_oxr, "status.subnetGroupName", False),
                              ])
                          ]):
                              "subnetGroupName": subnetGroup

                          if get(_oxr, "spec.snapshotRetentionLimit", False):
                              "snapshotRetentionLimit": get(_oxr, "spec.snapshotRetentionLimit", 1)
                          if get(_oxr, "spec.snapshotWindow", False):
                              "snapshotWindow": get(_oxr, "spec.snapshotWindow", "00:00-01:00")
                          if get(_oxr, "spec.userGroupIds", False):
                              "userGroupIds": [
                                  get(_oxr, "status.userGroupId", "")
                              ]

                          "tags": tags | {
                              "Name": "${appName}-${region}-${i}"
                          }
                      }
                      "providerConfigRef": pcr

                      "writeConnectionSecretToRef": {
                          "name": "${appName}-elasticache-${i}"
                          "namespace": get(_oxr, "spec.claimRef.namespace", "default")
                      }
                  }
              } for _, i in enabledReplicationGroups if all_true([
                  createReplicationGroup, keyId, i,
                  get(_oxr, "spec.engine", "redis") == "redis",
                  any_true([
                      i == "global",
                      all_true([i == "local", not globalEnabled]),
                      all_true([i == "local", globalEnabled, replicationGlobalRID]),
                  ]),
                  get(_oxr, "status.subnetGroupName", False)
                  get(_oxr, "status.securityGroupId", False)
              ])
          ]

          _items = [
              i for r in [
                  replicationGroups, globalReplicationGroup,
                  parameterGroup
              ] for i in r if i
          ]

          items = _items
        target: ""
    step: function-kcl-create-replicationgroup
  - functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        creationTimestamp: null
      spec:
        source: |-
          import regex

          _oxr = option("params").oxr
          _dxr = option("params").dxr
          _ocds = option("params").ocds
          _dcds = option("params").dcds

          get = lambda x: {:}, y: str, d: any -> any {
              """
              Get an item from a dictionary using a dot separated path.
              If the item is not found, return a default value.

              x: The dictionary to search in.
              y: The path to search for.
              d: The default value to return if the path is not found.
              """
              p = regex.split(y, "\.")
              c = p[0]
              y = ".".join(p[1:])
              x[c] if len(p) == 1 and c in x else d if c not in x else get(x[c], y, d)
          }

          getwparent = lambda x: {:}, p: {:}, y: str, d: any -> any {
              """
              Get with fallback to parent
              Tries to get a path from a dictionary, if it fails,
              tries to get it from the parent dictionary.

              If that fails, falls back to the default value provided.
              """
              get(x, y, get(p, "spec.${y}", d))
          }

          ocdsspec = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the spec of an ocds resource.
              """
              get(_ocds, "${x}.Resource.spec.${y}", d)
          }

          ocdsstatus = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the status of an ocds resource.
              """
              get(_ocds, "${x}.Resource.status.atProvider.${y}", d)
          }

          ready = lambda x: str -> bool {
              """
              Check if a value is ready.
              """
              conditions = get(_ocds, "${x}.Resource.status.conditions", [])
              all_true([
                  get(c, "status", "False") == "True" for c in conditions
              ])
          }

          readystr = lambda x: str -> str {
              """
              Check if a value is ready.
              """
              "True" if ready(x) else "False"
          }

          appName = get(_oxr, "spec.claimRef.name", "")
          createReplicationGroup = get(_oxr, "spec.createReplicationGroup", True)
          dp = get(_oxr, "spec.deletionPolicy", "Delete")
          keyId = get(_oxr, "status.kmsKeyId", False)
          namespace = get(_oxr, "spec.claimRef.namespace", "default")
          region = get(_oxr, "spec.region", "eu-central-1")
          pcr = get(_oxr, "spec.providerConfigRef", {"name": "default"})
          azs = [
              "${region}${az}"
              for az in get(_oxr, "spec.availabilityZones", [])
          ]
          labels = get(_oxr, "metadata.labels", {}) | {"region": region}

          tags = labels | get(_oxr, "spec.tags", {})

          globalEnabled = all_true([
              False,
              createReplicationGroup,
              get(_oxr, "spec.globalReplicationGroup.enabled", False)
          ])

          userNames = get(_oxr, "spec.userNames", []) + [appName, "default"]

          # If we are not creating a replication group, check how many cache clusters have
          # been requested and default a list of empty dictionaries as being the cache
          # cluster template.
          requiredClusters = get(_oxr, "spec.cacheClusters", []) if get(_oxr, "spec.cacheClusters", False) else [
              {}
              for i in range(get(_oxr, "spec.numCacheClusters", 1))
              if not get(_oxr, "spec.createReplicationGroup", False)
          ]

          clusters = [
              {
                  "apiVersion": "elasticache.aws.upbound.io/v1beta1"
                  "kind": "Cluster"
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name": "elasticache-cluster-${i}"
                          "krm.kcl.dev/ready": readystr("elasticache-cluster-${i}")
                          "crossplane.io/external-name": "${appName}-${region}-${i}"
                      }
                      "labels": labels
                  }
                  "spec": {
                      "deletionPolicy": get(_oxr, "spec.deletionPolicy", "Delete"),
                      "initProvider": {
                          if get(_oxr, "spec.autoMinorVersionUpgrade", False):
                              if get(_oxr, "spec.engineVersion", False):
                                  "engineVersion": get(_oxr, "spec.engineVersion", "7.x")
                      }

                      "forProvider": {
                          _v = getwparent(cluster, _oxr, "applyImmediately",False)
                          if _v:
                              "applyImmediately": _v

                          _v = getwparent(cluster, _oxr, "autoMinorVersionUpgrade", False)
                          if _v:
                              "autoMinorVersionUpgrade": _v

                          _az = get(cluster, "availabilityZone", azs[i % len(azs)])
                          if get(cluster, "availabilityZone", False):
                              "availabilityZone": _az

                          if all_true([
                              getwparent(cluster, _oxr, "azMode", False),
                              getwparent(cluster, _oxr "engine", False) == "memcached",
                          ]):
                              "azMode": getwparent(cluster, _oxr, "azMode", "cross-az"),
                              "numCacheNodes" = getwparent(cluster, _oxr, "numCacheNodes", len(azs)),

                          _v = getwparent(cluster, _oxr, "engine", False)
                          if _v:
                              "engine" = _v

                          if not get(_oxr, "spec.autoMinorVersionUpgrade", False):
                              _v = getwparent(cluster, _oxr, "engineVersion", False)
                              if _v:
                                  "engineVersion" = _v

                          _v = getwparent(cluster, _oxr, "finalSnapshotIdentifier", False)
                          if _v:
                              "finalSnapshotIdentifier" = _v

                          _v = getwparent(cluster, _oxr, "ipDiscovery", False)
                          if _v:
                              "ipDiscovery" = _v

                          if all_true([
                              getwparent(cluster, _oxr, "engine", "redis") == "redis",
                              getwparent(cluster, _oxr, "logDeliveryConfiguration", False),
                          ]):
                              _config = getwparent(cluster, _oxr, "logDeliveryConfiguration", [])
                              "logDeliveryConfiguration" = [{
                                  if get(c, "destination", False):
                                      "destination": get(c, "destination", ""),
                                  if get(c, "destinationType", False):
                                      "destinationType" = c.destinationType,
                                  if get(c, "logFormat", False):
                                      "logFormat" = c.logFormat,
                                  if get(c, "logType", False):
                                      "logType" = c.logType,
                              } for c in _config],

                          _v = getwparent(cluster, _oxr, "maintenanceWindow", False)
                          if _v:
                              "maintenanceWindow" = _v

                          _v = getwparent(cluster, _oxr, "networkType", False)
                          if _v:
                              "networkType" = _v

                          _v = getwparent(cluster, _oxr, "nodeType", False)
                          if _v:
                              "nodeType" = _v

                          _v = getwparent(cluster, _oxr, "notificationTopicArn", False)
                          if _v:
                              "notificationTopicArn" = _v

                          _om = getwparent(cluster, _oxr, "outpostMode", False)
                          _poa = getwparent(cluster, _oxr, "preferredOutpostArn", False)
                          if all_true([_om, _poa]):
                              "outpostMode" = _om,
                              "preferredOutpostArn" = _poa

                          _v = get(_oxr, "status.parameterGroupName", False)
                          if _v:
                              "parameterGroupName" = _v

                          _v = getwparent(cluster, _oxr, "port", False)
                              "port" = _v

                          if not get(cluster, "availabilityZone", False):
                              "preferredAvailabilityZones" = azs

                          "region" = region

                          if all_true([
                              get(_oxr, "spec.createReplicationGroup", False),
                              get(_oxr, "status.localReplicationGroupId", False),
                          ]):
                              "replicationGroupId" = get(_oxr, "status.localReplicationGroupId", "")

                          if get(_oxr, "status.securityGroupId", False):
                              "securityGroupIds" = [
                                  get(_oxr, "status.securityGroupId", None),
                              ] + getwparent(cluster, _oxr, "securityGroupIds", [])

                          _v = getwparent(cluster, _oxr, "snapshotArns", False)
                          if _v:
                              "snapshotArns" = _v

                          _v = getwparent(cluster, _oxr, "snapshotName", False)
                          if _v:
                              "snapshotName" = _v

                          _v = getwparent(cluster, _oxr, "snapshotRetentionLimit", False)
                          if _v:
                              "snapshotRetentionLimit" = _v

                          _v = getwparent(cluster, _oxr, "snapshotWindow", False)
                          if _v:
                              "snapshotWindow" = _v

                          # Only assign subnetGroup if we are not creating a replication group
                          if all_true([
                              get(_oxr, "status.subnetGroupName", False),
                              not getwparent(cluster, _oxr, "createReplicationGroup", False),
                          ]):
                              _sgn = getwparent(cluster, _oxr, "subnetGroupName", "")
                              "subnetGroupName" = get(_oxr, "status.subnetGroupName", _sgn)

                          "tags" = tags | get(cluster, "tags", {}) | {
                              "Name": "${appName}-${region}-${_az}"
                          },

                          _v = getwparent(cluster, _oxr, "transitEncryptionEnabled", False)
                          if _v:
                              "transitEncryptionEnabled" = _v
                      }
                      "providerConfigRef": pcr
                  }
              }
              for i, cluster in requiredClusters
              if all_true([
                  get(_oxr, "status.subnetGroupName", False)
                  get(_oxr, "status.securityGroupId", False)
              ])
          ]

          port = get(_oxr, "status.port", False)
          securityGroupRules = [
              {
                  "apiVersion": "ec2.aws.upbound.io/v1beta1"
                  "kind": "SecurityGroupRule"
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name": "elasticache-security-group-rule-inbound-${i}"
                          "krm.kcl.dev/ready": readystr("elasticache-security-group-rule-inbound-${i}")
                          "crossplane.io/external-name": "${appName}-cache-sg-rule-inbound"
                      }
                  }
                  "spec": {
                      "deletionPolicy": _oxr.spec.deletionPolicy
                      "forProvider": {
                          "cidrBlocks": [cidr],
                          "fromPort": port,
                          "protocol": "tcp",
                          "region": region,
                          "securityGroupId": get(_oxr, "status.securityGroupId", ""),
                          "toPort": port,
                          "type": "ingress",
                      }
                      "providerConfigRef": get(_oxr, "spec.providerConfigRef", {"name": "default"})
                  }
              }
              for i, cidr in get(_oxr, "spec.cidrBlocks", [])
              if all_true([
                  get(_oxr, "status.securityGroupId", False),
                  port, cidr,
              ])
          ]

          _items = [
              i for r in [clusters, securityGroupRules]
              for i in r if i
          ]

          items = _items
        target: ""
    step: function-kcl-create-cluster
  - functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        creationTimestamp: null
      spec:
        source: |-
          import regex

          _oxr = option("params").oxr
          _dxr = option("params").dxr
          _ocds = option("params").ocds
          _dcds = option("params").dcds

          get = lambda x: {:}, y: str, d: any -> any {
              """
              Get an item from a dictionary using a dot separated path.
              If the item is not found, return a default value.

              x: The dictionary to search in.
              y: The path to search for.
              d: The default value to return if the path is not found.
              """
              p = regex.split(y, "\.")
              c = p[0]
              y = ".".join(p[1:])
              x[c] if len(p) == 1 and c in x else d if c not in x else get(x[c], y, d)
          }

          getwparent = lambda x: {:}, p: {:}, y: str, d: any -> any {
              """
              Get with fallback to parent
              Tries to get a path from a dictionary, if it fails,
              tries to get it from the parent dictionary.

              If that fails, falls back to the default value provided.
              """
              get(x, y, get(p, "spec.${y}", d))
          }

          ocdsspec = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the spec of an ocds resource.
              """
              get(_ocds, "${x}.Resource.spec.${y}", d)
          }

          ocdsstatus = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the status of an ocds resource.
              """
              get(_ocds, "${x}.Resource.status.atProvider.${y}", d)
          }

          ready = lambda x: str -> bool {
              """
              Check if a value is ready.
              """
              conditions = get(_ocds, "${x}.Resource.status.conditions", [])
              all_true([
                  get(c, "status", "False") == "True" for c in conditions
              ])
          }

          readystr = lambda x: str -> str {
              """
              Check if a value is ready.
              """
              "True" if ready(x) else "False"
          }

          appName = get(_oxr, "spec.claimRef.name", "")
          createReplicationGroup = get(_oxr, "spec.createReplicationGroup", True)
          dp = get(_oxr, "spec.deletionPolicy", "Delete")
          keyId = get(_oxr, "status.kmsKeyId", False)
          namespace = get(_oxr, "spec.claimRef.namespace", "default")
          region = get(_oxr, "spec.region", "eu-central-1")
          pcr = get(_oxr, "spec.providerConfigRef", {"name": "default"})
          azs = [
              "${region}${az}"
              for az in get(_oxr, "spec.availabilityZones", [])
          ]
          labels = get(_oxr, "metadata.labels", {}) | {"region": region}

          tags = labels | get(_oxr, "spec.tags", {})

          globalEnabled = all_true([
              False,
              createReplicationGroup,
              get(_oxr, "spec.globalReplicationGroup.enabled", False)
          ])

          userNames = get(_oxr, "spec.userNames", []) + [appName, "default"]

          users = [
              {
                  "apiVersion": "elasticache.aws.upbound.io/v1beta1"
                  "kind": "User"
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name": "elasticache-user-${name}"
                          "krm.kcl.dev/ready": readystr("elasticache-user-${name}")
                      }
                      "labels": labels
                  }
                  "spec": {
                      "deletionPolicy": dp
                      "forProvider": {
                          if name == "default":
                              "accessString": "off ~* +@all"
                              "authenticationMode": [
                                  {
                                      "type": "no-password-required"
                                  }
                              ]
                          else:
                              "accessString": "on ~* +@all"
                              "authenticationMode": [
                                  {
                                      "passwordsSecretRef": [
                                          {
                                              "key": "password"
                                              if name == appName:
                                                  "name": "elasticache-user-${name}"
                                              else:
                                                  "name": "${appName}-elasticache-user-${name}"
                                              "namespace": namespace
                                          }
                                      ]
                                      "type": "password"
                                  }
                              ]
                          "engine": get(_oxr, "spec.engine", "redis")
                          "region": region
                          "tags" = tags | {
                              "Name": "${appName}-${region}-${name}"
                          }
                          "userName": name
                      }
                      "providerConfigRef": pcr
                  }
              }
              for name in userNames
          ] if all_true([
              get(_oxr, "spec.engine", "redis") == "redis",
              get(_oxr, "spec.createReplicationGroup", True),
          ]) else []

          userIds = [
              i for i in [
                  get(item, "Resource.status.atProvider.id", "")
                  for _, item in _ocds
                  if all_true([
                      get(item, "Resource.kind", "") == "User",
                      get(item, "Resource.apiVersion", "") == "elasticache.aws.upbound.io/v1beta1",
                  ])
              ] if i
          ]

          userGroup = [{
              "apiVersion": "elasticache.aws.upbound.io/v1beta1"
              "kind": "UserGroup"
              "metadata": {
                  "annotations": {
                      "krm.kcl.dev/composition-resource-name": "elasticache-user-group"
                      "krm.kcl.dev/ready": readystr("elasticache-user-group")
                      "crossplane.io/external-name": appName
                  }
                  "labels": labels
              }
              "spec": {
                  "deletionPolicy": dp
                  "forProvider": {
                      "engine": get(_oxr, "spec.engine", "redis")
                      "region": region
                      "tags": tags | {
                          "Name": "${appName}-${region}"
                      }
                      "userIds": userIds
                  }
                  "providerConfigRef": pcr
              }
          }] if all_true([
              userIds,
              get(_oxr, "spec.engine", "redis") == "redis",
              get(_oxr, "spec.createReplicationGroup", True),
          ]) else []

          _items = users + userGroup

          items = _items
        target: ""
    step: function-kcl-create-users
  - functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        creationTimestamp: null
      spec:
        source: |-
          import regex

          _oxr = option("params").oxr
          _dxr = option("params").dxr
          _ocds = option("params").ocds
          _dcds = option("params").dcds

          get = lambda x: {:}, y: str, d: any -> any {
              """
              Get an item from a dictionary using a dot separated path.
              If the item is not found, return a default value.

              x: The dictionary to search in.
              y: The path to search for.
              d: The default value to return if the path is not found.
              """
              p = regex.split(y, "\.")
              c = p[0]
              y = ".".join(p[1:])
              x[c] if len(p) == 1 and c in x else d if c not in x else get(x[c], y, d)
          }

          getwparent = lambda x: {:}, p: {:}, y: str, d: any -> any {
              """
              Get with fallback to parent
              Tries to get a path from a dictionary, if it fails,
              tries to get it from the parent dictionary.

              If that fails, falls back to the default value provided.
              """
              get(x, y, get(p, "spec.${y}", d))
          }

          ocdsspec = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the spec of an ocds resource.
              """
              get(_ocds, "${x}.Resource.spec.${y}", d)
          }

          ocdsstatus = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the status of an ocds resource.
              """
              get(_ocds, "${x}.Resource.status.atProvider.${y}", d)
          }

          ready = lambda x: str -> bool {
              """
              Check if a value is ready.
              """
              conditions = get(_ocds, "${x}.Resource.status.conditions", [])
              all_true([
                  get(c, "status", "False") == "True" for c in conditions
              ])
          }

          readystr = lambda x: str -> str {
              """
              Check if a value is ready.
              """
              "True" if ready(x) else "False"
          }

          appName = get(_oxr, "spec.claimRef.name", "")
          createReplicationGroup = get(_oxr, "spec.createReplicationGroup", True)
          dp = get(_oxr, "spec.deletionPolicy", "Delete")
          keyId = get(_oxr, "status.kmsKeyId", False)
          namespace = get(_oxr, "spec.claimRef.namespace", "default")
          region = get(_oxr, "spec.region", "eu-central-1")
          pcr = get(_oxr, "spec.providerConfigRef", {"name": "default"})
          azs = [
              "${region}${az}"
              for az in get(_oxr, "spec.availabilityZones", [])
          ]
          labels = get(_oxr, "metadata.labels", {}) | {"region": region}

          tags = labels | get(_oxr, "spec.tags", {})

          globalEnabled = all_true([
              False,
              createReplicationGroup,
              get(_oxr, "spec.globalReplicationGroup.enabled", False)
          ])

          userNames = get(_oxr, "spec.userNames", []) + [appName, "default"]

          esoEnabled = get(_oxr, "spec.eso.enabled", False)
          engine = get(_oxr, "spec.engine", "redis")
          kubernetesPcr = get(_oxr, "spec.kubernetesProviderConfig", {"name": "default"})

          has = all_true([
              engine == "redis",
              esoEnabled,
              kubernetesPcr,
          ])
          assert has != False, "Missing required kubernetes ProviderConfig and SecretStore fields for password generation"

          passwordGenerator = {
              "apiVersion": "kubernetes.crossplane.io/v1alpha2"
              "kind": "Object"
              "metadata": {
                  "annotations": {
                      "krm.kcl.dev/composition-resource-name" = "${appName}-pwgen"
                      "krm.kcl.dev/ready": readystr("${appName}-pwgen")
                  }
              }
              "spec": {
                  "deletionPolicy": dp,
                  "forProvider": {
                      "manifest": {
                          "apiVersion": "generators.external-secrets.io/v1alpha1"
                          "kind": "Password"
                          "metadata": {
                              "name": "${appName}-pwgen"
                              "namespace": namespace
                          }
                          "spec": {
                              "length": 42
                              "digits": 5
                              "symbols": 5
                              "symbolCharacters": "-_$@"
                              "noUpper": False
                              "allowRepeat": True
                          }
                      }
                  }
                  "providerConfigRef": get(_oxr, "spec.kubernetesProviderConfig", {"name": "default"})
              }
          }

          passwords = [
              {
                  "apiVersion": "kubernetes.crossplane.io/v1alpha2"
                  "kind": "Object"
                  "metadata": {
                      "annotations": {
                          "krm.kcl.dev/composition-resource-name": "${appName}-externalsecret-${user}"
                          "krm.kcl.dev/ready": readystr("${appName}-externalsecret-${user}")
                      }
                      "labels": labels
                  }
                  "spec": {
                      "deletionPolicy": dp
                      "forProvider": {
                          "manifest": {
                              "apiVersion": "external-secrets.io/v1beta1"
                              "kind": "ExternalSecret"
                              "metadata": {
                                  "namespace": namespace
                              }
                              "spec": {
                                  "refreshInterval": "1h"
                                  "target": {
                                      if user == appName:
                                          "name": "elasticache-user-${user}"
                                      else:
                                          "name": "${appName}-elasticache-user-${user}"
                                  }
                                  "dataFrom": [
                                      {
                                          "sourceRef": {
                                              "generatorRef": {
                                                  "apiVersion": "generators.external-secrets.io/v1alpha1"
                                                  "kind": "Password"
                                                  "name": "${appName}-pwgen"
                                              }
                                          }
                                      }
                                  ]
                              }
                          }
                      }
                      "providerConfigRef": get(_oxr, "spec.kubernetesProviderConfig", {"name": "default"})
                  }
              }
              for _, user in userNames
              if all_true([
                  get(_oxr, "spec.engine", "redis") == "redis",
                  get(_oxr, "spec.createReplicationGroup", True),
                  # don't create a password for the default user
                  # as this will be disabled
                  user != "default"
              ])
          ]

          _items = passwords + [passwordGenerator]

          items = _items
        target: ""
    step: function-kcl-create-password-generator
  - functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        creationTimestamp: null
      spec:
        source: |-
          import regex

          _oxr = option("params").oxr
          _dxr = option("params").dxr
          _ocds = option("params").ocds
          _dcds = option("params").dcds

          get = lambda x: {:}, y: str, d: any -> any {
              """
              Get an item from a dictionary using a dot separated path.
              If the item is not found, return a default value.

              x: The dictionary to search in.
              y: The path to search for.
              d: The default value to return if the path is not found.
              """
              p = regex.split(y, "\.")
              c = p[0]
              y = ".".join(p[1:])
              x[c] if len(p) == 1 and c in x else d if c not in x else get(x[c], y, d)
          }

          getwparent = lambda x: {:}, p: {:}, y: str, d: any -> any {
              """
              Get with fallback to parent
              Tries to get a path from a dictionary, if it fails,
              tries to get it from the parent dictionary.

              If that fails, falls back to the default value provided.
              """
              get(x, y, get(p, "spec.${y}", d))
          }

          ocdsspec = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the spec of an ocds resource.
              """
              get(_ocds, "${x}.Resource.spec.${y}", d)
          }

          ocdsstatus = lambda x: str, y: str, d: any -> any {
              """
              Get an item from the status of an ocds resource.
              """
              get(_ocds, "${x}.Resource.status.atProvider.${y}", d)
          }

          ready = lambda x: str -> bool {
              """
              Check if a value is ready.
              """
              conditions = get(_ocds, "${x}.Resource.status.conditions", [])
              all_true([
                  get(c, "status", "False") == "True" for c in conditions
              ])
          }

          readystr = lambda x: str -> str {
              """
              Check if a value is ready.
              """
              "True" if ready(x) else "False"
          }

          appName = get(_oxr, "spec.claimRef.name", "")
          createReplicationGroup = get(_oxr, "spec.createReplicationGroup", True)
          dp = get(_oxr, "spec.deletionPolicy", "Delete")
          keyId = get(_oxr, "status.kmsKeyId", False)
          namespace = get(_oxr, "spec.claimRef.namespace", "default")
          region = get(_oxr, "spec.region", "eu-central-1")
          pcr = get(_oxr, "spec.providerConfigRef", {"name": "default"})
          azs = [
              "${region}${az}"
              for az in get(_oxr, "spec.availabilityZones", [])
          ]
          labels = get(_oxr, "metadata.labels", {}) | {"region": region}

          tags = labels | get(_oxr, "spec.tags", {})

          globalEnabled = all_true([
              False,
              createReplicationGroup,
              get(_oxr, "spec.globalReplicationGroup.enabled", False)
          ])

          userNames = get(_oxr, "spec.userNames", []) + [appName, "default"]

          globalEndpoint = ocdsstatus("elasticache-replication-group-global", "primaryEndpointAddress", "") if globalEnabled else ""
          globalROEndpoint = ocdsstatus("elasticache-replication-group-global", "readerEndpointAddress", "") if globalEnabled else ""

          endpoint = ocdsstatus("elasticache-replication-group-local", "primaryEndpointAddress", "") if createReplicationGroup else ""
          readerep = ocdsstatus("elasticache-replication-group-local", "readerEndpointAddress", "") if createReplicationGroup else ""

          _port = 0
          if globalEnabled:
              _port = ocdsstatus("elasticache-replication-group-global", "port", False)
          elif createReplicationGroup:
              _port = ocdsstatus("elasticache-replication-group-local", "port", False)
          else:
              _port = ocdsstatus("elasticache-cluster-0", "port", False)

          localClusterName = "elasticache-replication-group-local"
          _connectionSecretName = ""
          if ready(localClusterName):
              _connectionSecretName = ocdsspec(localClusterName, "writeConnectionSecretToRef.name", "")

          globalClusterName = "elasticache-replication-group-global"
          _globalConnectionSecretName = ""
          if ready(globalClusterName):
              _globalConnectionSecretName = ocdsspec(globalClusterName, "writeConnectionSecretToRef.name", "")


          cc = get(_oxr, "spec.cacheClusters", [])
          rclen = len(cc) if cc else get(_oxr, "spec.numCacheClusters", 1)
          clusterEndpoints = [
              e for e in [
                  ocdsstatus("elasticache-cluster-${i}", "clusterAddress", "")
                  for i in range(rclen)
              ]
              if e
          ]

          _globalReplicationId = ocdsstatus("elasticache-replication-group-global", "id", "")
          _localReplicationId = ocdsstatus("elasticache-replication-group-local", "id", "")

          _ipgn = get(_oxr, "spec.parameterGroupName", "")
          if get(_oxr, "spec.parameterGroupConfiguration", False):
              _ipgn = get(_oxr, "spec.parameterGroupConfiguration.name", "")

          _ugId = ocdsstatus("elasticache-user-group", "id", "")

          dxr = {
              **_oxr,
              **{
                  "status": {
                      if _connectionSecretName:
                          "connectionSecret": _connectionSecretName,

                      if clusterEndpoints:
                          "clusterEndpoints" = clusterEndpoints,

                      if endpoint:
                          "endpoint": endpoint,

                      if _globalConnectionSecretName:
                          "globalConnectionSecret": _globalConnectionSecretName,

                      if globalEndpoint:
                          "globalEndpoint": globalEndpoint,

                      if globalROEndpoint:
                          "globalReaderEndpoint": globalROEndpoint,

                      if _globalReplicationId:
                          "globalReplicationGroupId": _globalReplicationId,

                      if _localReplicationId:
                          "replicationGroupId": _localReplicationId,

                      if _ipgn:
                          "parameterGroupName": _ipgn,

                      if _port:
                          "port": _port,

                      if readerep:
                          "readerEndpoint": readerep,

                      if _ugId:
                          "userGroupId": _ugId,
                  },
              }
          }

          _items = [dxr]

          items = _items
        target: ""
    step: function-kcl-dynamic-patching
  - functionRef:
      name: function-auto-ready
    step: function-auto-ready
