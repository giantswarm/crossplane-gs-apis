apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  creationTimestamp: null
  labels:
    component: database
    provider: aws
    type: base
  name: rds-cache-cluster
spec:
  compositeTypeRef:
    apiVersion: xdatabase.crossplane.giantswarm.io/v1alpha1
    kind: RdsCacheCluster
  mode: Pipeline
  pipeline:
  - functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.crossplane.io/v1beta1
      kind: Resources
      metadata:
        creationTimestamp: null
      patchSets:
      - name: metadata
        patches:
        - fromFieldPath: metadata.labels
          policy:
            toFieldPath: MergeObjects
          toFieldPath: metadata.labels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.region
          toFieldPath: metadata.labels.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef
          toFieldPath: spec.providerConfigRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
          type: FromCompositeFieldPath
      - name: commontags
        patches:
        - fromFieldPath: spec.tags
          policy:
            toFieldPath: MergeObjects
          toFieldPath: spec.forProvider.tags
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels
          policy:
            toFieldPath: MergeObjects
          toFieldPath: spec.forProvider.tags
          type: FromCompositeFieldPath
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.tags.region
          type: FromCompositeFieldPath
      resources:
      - base:
          apiVersion: xnetworks.crossplane.giantswarm.io/v1alpha1
          kind: PeeredVpcNetwork
          metadata:
            creationTimestamp: null
          spec:
            availabilityZones: null
            peering:
              allowPublic: false
              enabled: false
              groupBy: ""
              remoteVpcs: null
            region: ""
            subnetsets:
              cidrs: null
              function: ""
            tags: {}
          status:
            calculatedCidrs: null
            subnetBits: null
        name: peered-vpc-network
        patches:
        - fromFieldPath: spec.vpc
          toFieldPath: spec
          type: FromCompositeFieldPath
        - fromFieldPath: spec.availabilityZones
          toFieldPath: spec.availabilityZones
          type: FromCompositeFieldPath
        - fromFieldPath: spec.claimRef
          toFieldPath: spec.claimRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
          type: FromCompositeFieldPath
        - fromFieldPath: spec.region
          toFieldPath: spec.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef
          toFieldPath: spec.providerConfigRef
          type: FromCompositeFieldPath
        - fromFieldPath: status.vpcs.self
          toFieldPath: status.vpc
          type: ToCompositeFieldPath
      - base:
          apiVersion: xdatabase.crossplane.giantswarm.io/v1alpha1
          kind: RdsBaseDbCluster
          metadata:
            creationTimestamp: null
          spec:
            cidrBlocks: null
            dbClusterParameterGroup: null
            region: null
            subnetIds: null
            vpcId: null
          status: {}
        name: rds-base
        patches:
        - fromFieldPath: spec.database
          toFieldPath: spec
          type: FromCompositeFieldPath
        - fromFieldPath: spec.availabilityZones
          toFieldPath: spec.availabilityZones
          type: FromCompositeFieldPath
        - fromFieldPath: spec.claimRef
          toFieldPath: spec.claimRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef
          toFieldPath: spec.providerConfigRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.region
          toFieldPath: spec.region
          type: FromCompositeFieldPath
        - fromFieldPath: status.vpc.id
          policy:
            fromFieldPath: Required
          toFieldPath: spec.vpcId
          type: FromCompositeFieldPath
    step: patch-and-transform
  - functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLInput
      metadata:
        creationTimestamp: null
      spec:
        config: {}
        credentials:
          password: ""
          username: ""
        source: |-
          import regex

          _oxr = option("params").oxr
          _dxr = option("params").dxr
          _ocds = option("params").ocds
          _dcds = option("params").dcds

          get = lambda x: any, y: str, d: any -> any {
              """
              Get an item from a dictionary using a dot separated path.
              If the item is not found, return a default value.
              """
              p = regex.split(y, "\.")
              c = p[0]
              y = ".".join(p[1:])
              x[c] if len(p) == 1 and c in x else d if c not in x else get(x[c], y, d)
          }

          _subnets = get(_oxr, "status.vpc.privateSubnets", [])

          _dbsnindex = get(_oxr, "spec.subnetGroupIndexes.database", False)
          _dbSnIds = [k for _, k in _subnets[_dbsnindex]] if _dbsnindex and _subnets else []

          _cachesnindex = get(_oxr, "spec.subnetGroupIndexes.cache", False)
          _cacheSnIds = [k for _, k in _subnets[_cachesnindex]] if _cachesnindex and _subnets else []

          _dbPatch = {
              **get(_dcds, "rds-base.Resource", {}),
              **{
                  "metadata": {
                      annotations: {
                          "krm.kcl.dev/composition-resource-name" = "rds-base"
                      }
                  }
                  "spec": {
                      "cidrBlocks": [
                          get(_oxr, "status.vpc.cidrBlock", "")
                      ] + get(_oxr, "status.vpc.additionalCidrBlocks", []),
                      "subnetIds": _dbSnIds
                  }
              }
          } if all_true([
              _dbSnIds,
              get(_dcds, "rds-base.Resource", False),
              get(_oxr, "status.vpc.id", False),
          ]) else {}

          _cachePatch = {
              **get(_dcds, "cache-base.Resource", {}),
              **{
                  "metadata": {
                      annotations: {
                          "krm.kcl.dev/composition-resource-name" = "cache-base"
                      }
                  }
                  "spec": {
                      "cidrBlocks": [
                          get(_oxr, "status.vpcCidrBlock", "")
                      ] + get(_oxr, "status.vpc.additionalCidrBlocks", []),
                      "subnetIds": _cacheSnIds
                  }
              }
          } if all_true([
              _cacheSnIds,
              get(_dcds, "cache-base.Resource", False),
              get(_oxr, "spec.cache", False),
              get(_oxr, "status.vpc.id", False),
          ]) else {}

          items = [
              k for _, k in [_dbPatch, _cachePatch] if k
          ]
        target: ""
    step: function-kcl-dynamic-patch
  - functionRef:
      name: function-auto-ready
    step: function-auto-ready
